package production;

public class AList2 implements  EList
{
	private int[] massiv = new int[100];
	private int indexmas = 0;
	private int start = 0;
	private int end = 0;
	

	public void EList (int[] array)
	{
		init(array);
	} 
	
	public AList2() {
		start = (massiv.length / 2);
		end = massiv.length - start;
	}
	@Override
	public void init(int[] array)
	{
		indexmas = array.length;
		for (int i=0; i<indexmas; i++)
		{
			massiv[i] = array[i];
		}
	}
	
	@Override
	public int[] toArray()
	{
		int[] array = new int[size()];
		for (int i=0; i<size(); i++)
		{
			array[i] = massiv[i+start];
		}
		return array;
	}
	
	@Override
	public void addStart (int a)
	{
		if (indexmas == 100)
		{
			throw new IllegalArgumentException();
		}
		massiv[start] = a;
		start--;

	}

	@Override
	public void addPos (int a, int pos)
	{
		if (indexmas == 100)
		{
			throw new IllegalArgumentException();
		}
		else
		{
			for (int i=indexmas; i>=pos; i--)
			{
				massiv[i+1] = massiv[i];
			}
			massiv[pos] = a;
			indexmas++;
		}
	}
	
	@Override
	public void addEnd (int a)
	{
		if (indexmas == 100)
		{
			throw new IllegalArgumentException();
		}
		end++;
		massiv[end] = a;
	}
	
	
	@Override
	public void delStart ()
	{
		if (indexmas == 0)
		{
			throw new IllegalArgumentException();
		}
		else
		{
			for (int i=0; i<indexmas; i++)
			{
				massiv[i] = massiv[i+1];
			}
			indexmas--;
		}
	}
	
	@Override
	public void delPos (int a, int pos)
	{
		if (indexmas == 0)
		{
			throw new IllegalArgumentException();
		}
		else
		{
			for (int i=pos; i>indexmas; i++)
			{
				massiv[i] = massiv[i+1];
			}
			indexmas--;
		}
	}
	
	@Override
	public void delEnd ()
	{
		if (indexmas == 0)
		{
			throw new IllegalArgumentException();
		}
		else
		{
			indexmas--;
		}
	}
	
	
	public int size ()
	{
		if(massiv == null)
		{
			return 0;
		}
	return end - start;
	}
	
	@Override
	public int minValue () 
	{
		if (massiv == null)
		{
			throw new IllegalArgumentException();
		}
		else
		{
			int vivod = massiv[start];
			for (int i=start; i<end; i++) 
			{
				if (vivod > massiv[i])
				{
					vivod = massiv[i];
				}
			}
			
			return vivod;
		}
    }
	
@Override
	public int maxValue ()  
	{
		if (massiv == null)
		{
			throw new IllegalArgumentException();
		}
		else
		{
			int vivod = massiv[start];
			for (int i=start; i<end; i++) 
			{
				if (vivod < massiv[i]) 
				{
					vivod = massiv[i];
				}
			}
			
			return vivod;
		}
    }
	
	@Override
	public int minIndex () 
    {
		if (massiv == null)
		{
			throw new IllegalArgumentException();
		}
		else
		{
			int vivod = massiv[start];
			int index = 0;
			for (int i=start; i<end; i++) 
			{
				if (vivod > massiv[i])
				{
					vivod = massiv[i];
					index = i;
				}
			}
			
			vivod = index;
			return vivod;
		}
    }
	
	@Override
	public int maxIndex () 
    {
		if (massiv == null)
		{
			throw new IllegalArgumentException();
		}
		else
		{
			int vivod = 0;
			int index = 0;
			for (int i=start; i<end; i++) 
			{
				if (vivod < massiv[i])
				{
					vivod = massiv[i];
					index = i;
				}
			}
			
			vivod = index;
			return vivod;
		}
    }
	
	
	@Override
	public void reverse()
	{
		if (massiv == null)
		{
			throw new IllegalArgumentException();
		}
		else
		{
			for (int i=start; i<end-start/2; i++)
			{
				int temp = massiv[i];
				massiv[i] = massiv[end-start-i-1];
				massiv[end-start-i-1] = temp;
			}
		}
	} 
	
	@Override
	public void changeparts ()
	{
		if (massiv == null || massiv.length%2 != 0)
		{
			throw new IllegalArgumentException();
		}
		else
		{
			for (int i=0; i<massiv.length/2; i++)
			{
				int temp = massiv[i];
				massiv[i] = massiv[massiv.length/2+i];
				massiv[massiv.length/2+i] = temp;
			}
		}
	}
	@Override
	public void sortBubble () 
    {
		if (massiv == null)
		{
			throw new IllegalArgumentException();
		}
		else
		{
			int ii = 0;
			while (true)
			{
				int in = 0;
				for (int i=0; i<massiv.length-1; i++) 
				{
					if (massiv[i] > massiv[i+1]) 
					{
						ii = massiv[i];
						massiv[i] = massiv[i+1];
						massiv[i+1] = ii;
						in = 1;
					}
				}
				if (in == 0)
				{
					break;
				}
			}
		}
    }
	
	@Override
	public void sortSelect () 
    {
		if (massiv == null)
		{
			throw new IllegalArgumentException();
		}
		else
		{
			int i=0;
			int p = 0;
			int ii = 0;
			int cc = 0;
			int x = 0;
			int index = 0;
			
			while (true)
			{
				for (i=p; i<massiv.length; i++) 
				{
					if (i == p)
					{
						cc = massiv[p];
					}
					if (cc > massiv[i])
					{
						cc = massiv[i];
						index = i;
					}
				}
				int s = 0;
				for (i=0; i<massiv.length-1; i++) 
				{
					if (massiv[i] < massiv[i+1])
					{
						s++;
					}
				}
				if (s == massiv.length-1)
				{
					break;
				}
				ii = massiv[x];
				massiv[x] = massiv[index];
				massiv[index] = ii;
				p++;
				x++;
			}
		}
    }
	
	
	@Override
	public void sortInsert ()
    {	
		if (massiv == null)
		{
			throw new IllegalArgumentException();
		}
		else
		{
			for (int i=0; i<massiv.length; i++)
			{
				for (int i2=0; i2<=i; i2++)
				{
					if (massiv[i] < massiv[i2])
					{
						//System.out.println ("ïðîâåðêà ---  " + i +" < "+i2 );
						int m = massiv[i2];
						int m2 = massiv[i];
						for (int i3=massiv.length-1; i3>=0; i3--)
						{
							if(i3 <= i && i3 >= i2+1)
							{
								massiv[i3] = massiv[i3-1];
							}
						}
						massiv[i2] = m2;
						massiv[i2+1] = m;	
					}
				}
			}
		}
    }
}